AWSTemplateFormatVersion: '2010-09-09'
Description: 'World Cup Wednesdays - Minimal Cost Infrastructure (Single AZ, Minimal Resources)'

Parameters:
  Environment:
    Type: String
    Default: staging
    AllowedValues: [staging, production]
    Description: Environment name

  ImageTag:
    Type: String
    Default: latest
    Description: Docker image tag to deploy

  DatabasePassword:
    Type: String
    NoEcho: true
    MinLength: 8
    Description: RDS PostgreSQL password

  JWTSecret:
    Type: String
    NoEcho: true
    MinLength: 32
    Description: JWT secret key

Resources:
  # Minimal VPC (Single AZ for cost savings)
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub wcw-minimal-vpc-${Environment}

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub wcw-minimal-public-subnet-${Environment}

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub wcw-minimal-private-subnet-${Environment}

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub wcw-minimal-igw-${Environment}

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub wcw-minimal-public-routes-${Environment}

  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet

  # Security Groups
  ApplicationSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Combined security group for all services
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5000
          ToPort: 5000
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref ApplicationSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub wcw-minimal-sg-${Environment}

  # Application Load Balancer (Single AZ)
  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub wcw-minimal-alb-${Environment}
      Subnets:
        - !Ref PublicSubnet
      SecurityGroups:
        - !Ref ApplicationSecurityGroup
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: !Sub wcw-minimal-alb-${Environment}

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref FrontendTargetGroup
      LoadBalancerArn: !Ref LoadBalancer
      Port: 80
      Protocol: HTTP

  # Target Groups
  FrontendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub wcw-minimal-frontend-tg-${Environment}
      Port: 3000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 60  # Longer interval to reduce costs
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  BackendTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub wcw-minimal-backend-tg-${Environment}
      Port: 5000
      Protocol: HTTP
      VpcId: !Ref VPC
      TargetType: ip
      HealthCheckPath: /api/health
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 60  # Longer interval to reduce costs
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5

  # Listener Rules
  BackendListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref BackendTargetGroup
      Conditions:
        - Field: path-pattern
          Values: ['/api/*', '/socket.io/*']
      ListenerArn: !Ref LoadBalancerListener
      Priority: 1

  # RDS Database (Single AZ, minimal configuration)
  DatabaseSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Minimal subnet group for RDS database
      SubnetIds:
        - !Ref PrivateSubnet
        - !Ref PublicSubnet  # Use public subnet as second AZ requirement
      Tags:
        - Key: Name
          Value: !Sub wcw-minimal-db-subnet-group-${Environment}

  Database:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete  # Allow deletion for cost savings in non-prod
    Properties:
      DBInstanceIdentifier: !Sub wcw-minimal-db-${Environment}
      DBName: world_cup_wednesdays
      DBInstanceClass: db.t3.micro
      AllocatedStorage: 20
      StorageType: gp2
      Engine: postgres
      EngineVersion: '15.4'
      MasterUsername: wcw_user
      MasterUserPassword: !Ref DatabasePassword
      VPCSecurityGroups:
        - !Ref ApplicationSecurityGroup
      DBSubnetGroupName: !Ref DatabaseSubnetGroup
      BackupRetentionPeriod: 1  # Minimal backup retention
      MultiAZ: false
      StorageEncrypted: false  # Disable encryption for cost savings
      DeletionProtection: false
      AutoMinorVersionUpgrade: true
      PreferredMaintenanceWindow: sun:03:00-sun:04:00
      PreferredBackupWindow: 02:00-03:00
      Tags:
        - Key: Name
          Value: !Sub wcw-minimal-db-${Environment}

  # ECR Repositories (Shared)
  BackendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: wcw-backend-minimal
      ImageScanningConfiguration:
        ScanOnPush: false  # Disable scanning for cost savings
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 3 images only",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 3
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  FrontendRepository:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: wcw-frontend-minimal
      ImageScanningConfiguration:
        ScanOnPush: false  # Disable scanning for cost savings
      LifecyclePolicy:
        LifecyclePolicyText: |
          {
            "rules": [
              {
                "rulePriority": 1,
                "description": "Keep last 3 images only",
                "selection": {
                  "tagStatus": "any",
                  "countType": "imageCountMoreThan",
                  "countNumber": 3
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }

  # ECS Cluster (Minimal)
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub wcw-minimal-${Environment}
      CapacityProviders:
        - FARGATE_SPOT  # Only use Spot for maximum cost savings
      DefaultCapacityProviderStrategy:
        - CapacityProvider: FARGATE_SPOT
          Weight: 1
      ClusterSettings:
        - Name: containerInsights
          Value: disabled  # Disable for cost savings

  # IAM Roles (Minimal)
  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy

  # CloudWatch Log Groups (Minimal retention)
  BackendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/wcw-minimal-backend-${Environment}
      RetentionInDays: 3  # Very short retention for cost savings

  FrontendLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /ecs/wcw-minimal-frontend-${Environment}
      RetentionInDays: 3  # Very short retention for cost savings

  # ECS Task Definitions (Minimal resources)
  BackendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub wcw-minimal-backend-${Environment}
      Cpu: 256  # Minimal CPU
      Memory: 512  # Minimal memory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: backend
          Image: !Sub ${AWS::AccountId}.dkr.ecr.eu-west-2.amazonaws.com/wcw-backend-minimal:${ImageTag}
          PortMappings:
            - ContainerPort: 5000
          Environment:
            - Name: NODE_ENV
              Value: production
            - Name: DB_HOST
              Value: !GetAtt Database.Endpoint.Address
            - Name: DB_PORT
              Value: '5432'
            - Name: DB_NAME
              Value: world_cup_wednesdays
            - Name: DB_USER
              Value: wcw_user
            - Name: DB_PASSWORD
              Value: !Ref DatabasePassword
            - Name: JWT_SECRET
              Value: !Ref JWTSecret
            - Name: PORT
              Value: '5000'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref BackendLogGroup
              awslogs-region: eu-west-2
              awslogs-stream-prefix: ecs

  FrontendTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub wcw-minimal-frontend-${Environment}
      Cpu: 256  # Minimal CPU
      Memory: 512  # Minimal memory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn: !Ref ECSTaskExecutionRole
      ContainerDefinitions:
        - Name: frontend
          Image: !Sub ${AWS::AccountId}.dkr.ecr.eu-west-2.amazonaws.com/wcw-frontend-minimal:${ImageTag}
          PortMappings:
            - ContainerPort: 3000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref FrontendLogGroup
              awslogs-region: eu-west-2
              awslogs-stream-prefix: ecs

  # ECS Services (Single instance)
  BackendService:
    Type: AWS::ECS::Service
    DependsOn: BackendListenerRule
    Properties:
      ServiceName: !Sub wcw-minimal-backend-${Environment}
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0  # Allow complete replacement for cost savings
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED  # Use public subnet for cost savings
          SecurityGroups:
            - !Ref ApplicationSecurityGroup
          Subnets:
            - !Ref PublicSubnet
      TaskDefinition: !Ref BackendTaskDefinition
      LoadBalancers:
        - ContainerName: backend
          ContainerPort: 5000
          TargetGroupArn: !Ref BackendTargetGroup

  FrontendService:
    Type: AWS::ECS::Service
    DependsOn: LoadBalancerListener
    Properties:
      ServiceName: !Sub wcw-minimal-frontend-${Environment}
      Cluster: !Ref ECSCluster
      LaunchType: FARGATE
      PlatformVersion: LATEST
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 0  # Allow complete replacement for cost savings
      DesiredCount: 1
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED  # Use public subnet for cost savings
          SecurityGroups:
            - !Ref ApplicationSecurityGroup
          Subnets:
            - !Ref PublicSubnet
      TaskDefinition: !Ref FrontendTaskDefinition
      LoadBalancers:
        - ContainerName: frontend
          ContainerPort: 3000
          TargetGroupArn: !Ref FrontendTargetGroup

Outputs:
  LoadBalancerDNS:
    Description: DNS name of the load balancer
    Value: !GetAtt LoadBalancer.DNSName
    Export:
      Name: !Sub ${AWS::StackName}-LoadBalancerDNS

  DatabaseEndpoint:
    Description: RDS instance endpoint
    Value: !GetAtt Database.Endpoint.Address
    Export:
      Name: !Sub ${AWS::StackName}-DatabaseEndpoint

  EstimatedMonthlyCost:
    Description: Estimated monthly cost in USD
    Value: "~$25-35/month (RDS t3.micro ~$15, ECS Fargate Spot ~$10-20)"